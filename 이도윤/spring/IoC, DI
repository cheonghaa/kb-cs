### IoC (Inversion of Control) : 제어의 역전

소프트웨어 설계에서 IoC는 제어 흐름의 책임을 개발자가 아닌 프레임워크나 컨테이너에 위임하는 것이다.

쉽게 말해 보통 제어는 개발자가 한다고 생각하지만 역할이 역전이 되어 프레임워크가 직접 제어의 역할을 가지게 되는 것을 말한다고 볼 수 있다.

즉, 프로그램의 흐름과 객체 생성, 의존성 관리 등의 제어를 개발자 대신 외부 시스템이 맡게 된다고 볼 수 있다.

**IoC 컨테이너**

- **정의**: IoC(Inversion of Control) 컨테이너는 객체의 생성, 관리, 의존성 주입 등을 담당하는 프레임워크의 부분입니다. Spring의 경우, ApplicationContext가 이러한 역할을 수행합니다.
- **역할**: IoC 컨테이너는 객체의 생성, 초기화, 의존성 주입을 관리하며, 객체 간의 관계를 설정합니다. 이 컨테이너는 객체의 생명 주기를 관리하고, 필요한 의존성을 외부에서 주입하여 객체의 결합도를 낮춥니다.

### DI(Dependency Injection) : 의존성 주입

이런 IoC를 구현하는 방법 중 하나가 의존성 주입(DI)이다.

객체 생성이나 관리에 대한 책임을 IoC 컨테이너가 가지고, 필요한 객체를 직접 생성해서 외부에서 주입받는 방식

객체가 자신의 의존성을 직접 생성하거나 관리하지 않고, 외부에서 주입받아 사용한다.

여기서 의존성이란 하나의 클래스나 모듈이 다른 클래스나 모듈에 대해 사용하는 관계를 의미한다. 간단히 말해, 의존성은 특정 객체가 기능을 수행하기 위해 다른 객체나 컴포넌트의 도움을 필요로 하는 상황이다.

**의존성의 구체적인 의미**

1. **기능적 의존성**: 한 객체가 특정 기능을 수행하기 위해 다른 객체의 기능이나 데이터를 필요로 하는 경우.
2. **구현 의존성**: 클래스가 특정 구현에 의존하는 경우.
3. **데이터 의존성**: 객체가 다른 객체의 데이터를 필요로 하는 경우.

- **후보 없이 특정 기능을 하는 클래스가 딱 한 개하면, 구체 클래스를 그냥 사용해도 되지 않나요? 그럼에도 불구하고 왜 Spring에선 Bean을 사용 할까요?**

스프링에서 빈이란, 스프링 IoC(Inversion of Control) 컨테이너가 관리하는 자바 객체를 의미합니다. 쉽게 말해, 스프링 애플리케이션에서 사용되는 객체를 "빈"이라고 부릅니다.

빈은 단순한 객체가 아니라, 스프링이 직접 생성하고 관리하는 객체로, 애플리케이션 전반에서 필요한 의존성을 주입받고, 스프링이 제공하는 다양한 기능을 통해 애플리케이션의 동작을 유연하고 효율적으로 만들어 줍니다.

→ 스프링 빈을 사용하는 것은 단순히 객체를 관리하기 위한 것이 아니라, 의존성 관리, 객체 생명주기 제어, AOP 적용, 테스트 편의성 등 다양한 이점을 제공하기 때문입니다. 이러한 이유로, 비록 현재는 클래스가 하나뿐이더라도, 확장성과 유지보수성을 고려하면 스프링 빈으로 관리하는 것이 바람직한 선택입니다.



- **Spring의 Bean 생성 주기에 대해 설명해 주세요.**

스프링 빈의 생명주기는 스프링 IoC 컨테이너가 빈을 생성, 초기화, 사용, 소멸시키는 일련의 과정을 의미합니다. 이 생명주기는 빈의 생성과 소멸 과정에서 특정 작업을 수행할 수 있도록 훅(Hook)을 제공합니다.

### 생명주기의 전체 흐름

1. **빈 생성**: 스프링 컨테이너가 빈을 생성합니다.
2. **의존성 주입**: 필요한 의존성이 주입됩니다.
3. **초기화 메서드 호출**: 빈의 초기화 메서드가 호출됩니다 (`@PostConstruct` 또는 `afterPropertiesSet()`).
4. **빈 사용**: 빈이 애플리케이션에서 사용됩니다.
5. **소멸 전 메서드 호출**: 빈이 소멸되기 전에 정리 작업을 수행합니다 (`@PreDestroy` 또는 `destroy()`).

### 1. **빈 객체 생성**

- 스프링 컨테이너가 빈을 생성합니다. 빈은 클래스의 인스턴스가 메모리에 로드될 때 생성됩니다. 이 과정에서 객체가 생성되고, 의존성 주입(Dependency Injection)이 이루어집니다.

### 2. **의존성 주입(Dependency Injection)**

- 생성된 빈에 대해 의존성 주입이 진행됩니다. 필요한 의존 객체가 주입되며, 이 과정은 생성자 주입 또는 세터 메서드를 통해 이루어질 수 있습니다.

### 3. **빈의 초기화(Initialization)**

- 빈이 생성되고 의존성 주입이 완료된 후, 초기화 작업을 수행할 수 있습니다. 이 단계에서 개발자는 빈의 상태를 설정하거나, 필요한 초기화 작업을 할 수 있습니다.
- 초기화 작업을 위해 사용할 수 있는 방법:
    - **`@PostConstruct` 애너테이션**: 빈 초기화 후 호출될 메서드를 정의합니다.
    - **`InitializingBean` 인터페이스의 `afterPropertiesSet()` 메서드**: 이 인터페이스를 구현하여 초기화 로직을 작성할 수 있습니다.
    - **XML 설정에서 `<bean>`의 `init-method` 속성**: XML로 설정할 때, 초기화 메서드를 지정할 수 있습니다.

### 4. **빈의 사용(Usage)**

- 빈은 애플리케이션 전반에서 사용됩니다. 클라이언트는 이 빈을 호출해 필요한 비즈니스 로직을 수행합니다. 이 단계에서 빈은 의존성을 주입받고, 필요한 로직을 수행합니다.

### 5. **빈의 소멸(Destroy)**

- 애플리케이션이 종료되거나, 빈이 더 이상 필요하지 않게 되면 빈이 소멸됩니다. 이 과정에서 자원 해제와 같은 정리 작업이 필요할 수 있습니다.
- 소멸 작업을 위해 사용할 수 있는 방법:
    - **`@PreDestroy` 애너테이션**: 빈이 소멸되기 전에 호출될 메서드를 정의합니다.
    - **`DisposableBean` 인터페이스의 `destroy()` 메서드**: 이 인터페이스를 구현하여 소멸 시 로직을 작성할 수 있습니다.
    - **XML 설정에서 `<bean>`의 `destroy-method` 속성**: XML로 설정할 때, 소멸 메서드를 지정할 수 있습니다.


- **프로토타입 빈은 무엇인가요?**

"프로토타입(Prototype) 빈"이란, 스프링의 빈 스코프(Bean Scope) 중 하나로, 빈이 요청될 때마다 새로운 인스턴스를 생성하는 빈 스코프입니다. 기본적으로 스프링 빈은 싱글톤(Singleton) 스코프를 사용하여, 애플리케이션 컨텍스트에서 하나의 인스턴스만 생성되고 모든 요청에서 동일한 인스턴스를 공유합니다. 반면, 프로토타입 스코프를 사용하면 요청할 때마다 매번 새로운 인스턴스가 생성됩니다.
