# DTO, DAO, VO, Entity

### 1. DTO (Data Transfer Object)

DTO는 데이터 전송 객체로, 주로 계층 간 데이터 전송을 목적으로 사용됩니다. 주로 Presentation Layer (UI)에서 Business Layer, 혹은 Service Layer로 데이터를 전달하거나, 반대로 데이터를 수신할 때 사용됩니다.

**데이터를 옮기는 상자**

DTO는 데이터를 다른 곳으로 옮기는 상자라고 생각하면 됩니다. 우리가 필요한 정보를 담아서, 다른 사람에게 전달하는 것처럼, 프로그램에서도 데이터를 담아서 다른 곳으로 전달해야 할 때가 있습니다. 이때 DTO가 상자 역할을 해줍니다. 이 상자 안에는 단순한 정보만 담겨 있다고 생각하시면 됩니다.

- **주요 역할**: 데이터의 캡슐화, 단순 데이터 전송
- **주로 사용하는 곳**: 컨트롤러와 서비스 계층 간의 데이터 전송
- **특징**:
    - 필드는 주로 getter와 setter로 구성됩니다.
    - 비즈니스 로직이 거의 없고, 단순히 데이터를 담고 이동하는 역할만 합니다.
    - 네트워크 통신이나 API 응답에서 사용됩니다.

```java

public class UserDTO {
    private String name;
    private int age;
    // getters and setters
}

```

### 2. DAO (Data Access Object)

DAO는 데이터 액세스 객체로, 데이터베이스와 상호작용하는 계층을 담당합니다. DAO는 주로 데이터베이스에 CRUD (Create, Read, Update, Delete) 작업을 수행하는 메서드를 제공합니다.

**데이터를 꺼내오고 저장하는 도우미**

DAO는 데이터베이스라는 창고에서 데이터를 꺼내오고, 저장해주는 도우미 역할을 합니다. 물건을 사고 팔 때 창고에서 물건을 꺼내오거나, 새 물건을 넣는 것처럼, 프로그램에서도 데이터를 데이터베이스에서 꺼내오고, 새로 저장해야할 때 도와주는 게 DAO입니다.

예를 들어:

- 도서관에서 책을 빌리려면 도서관 사서가 책을 꺼내서 주죠? DAO는 그런 사서 역할을 해요.

- **주요 역할**: 데이터베이스 작업을 캡슐화하여 비즈니스 로직에서 데이터 액세스를 추상화
- **주로 사용하는 곳**: Repository 계층 (Spring에서는 `@Repository`를 사용)
- **특징**:
    - 데이터베이스에 직접 접근하여 데이터를 가져오거나 저장하는 메서드를 포함합니다.
    - 데이터베이스 관련 코드를 한 곳에 집중시켜, 코드의 재사용성과 유지보수성을 높입니다.

```java

@Repository
public class UserDAO {
    // Example with JDBC Template
    @Autowired
    private JdbcTemplate jdbcTemplate;

    public User findUserById(int id) {
        String query = "SELECT * FROM users WHERE id = ?";
        return jdbcTemplate.queryForObject(query, new Object[]{id}, new UserRowMapper());
    }

    public void saveUser(User user) {
        String query = "INSERT INTO users (name, age) VALUES (?, ?)";
        jdbcTemplate.update(query, user.getName(), user.getAge());
    }
}

```

### 3. VO (Value Object)

VO는 값 객체로, 주로 변하지 않는 데이터를 표현할 때 사용됩니다. VO는 객체의 동일성을 판단할 때 값 자체로 비교합니다. 즉, 두 VO 객체가 같다는 것은 그들의 필드 값이 모두 같다는 것을 의미합니다.

**절대 변하지 않는 주소나 색깔 같은 값**

VO는 변하지 않는 중요한 정보를 담고 있는 상자예요. 예를 들어, 사람의 주소나 색깔처럼 한 번 정해지면 쉽게 바뀌지 않는 정보들이 VO에 들어가요. 그래서 이 상자는 한 번 만들면 바꿀 수 없도록 되어 있어요.

- **주요 역할**: 불변 객체로서, 주로 값 그 자체를 표현
- **주로 사용하는 곳**: 값 비교가 중요한 도메인 계층 (비즈니스 로직)
- **특징**:
    - 불변성을 가집니다. VO의 필드는 생성 후 변경되지 않습니다.
    - 보통 생성자에서 모든 필드를 초기화하며, setter는 없습니다.
    - 값의 동일성을 비교할 때는 객체의 참조가 아니라, 값 자체를 비교합니다.

```java

public class AddressVO {
    private final String street;
    private final String city;

    public AddressVO(String street, String city) {
        this.street = street;
        this.city = city;
    }

    public String getStreet() {
        return street;
    }

    public String getCity() {
        return city;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AddressVO addressVO = (AddressVO) o;
        return Objects.equals(street, addressVO.street) && Objects.equals(city, addressVO.city);
    }

    @Override
    public int hashCode() {
        return Objects.hash(street, city);
    }
}

```

### 4. Entity

Entity는 데이터베이스의 테이블과 매핑되는 클래스입니다. 주로 JPA (Java Persistence API)와 함께 사용되며, 데이터베이스 테이블의 구조를 나타냅니다.

**데이터베이스와 실제로 연결된 것**

Entity는 데이터베이스에 실제로 저장되는 것이다. 데이터베이스에서 꺼내올 때는 이 Entity로 바뀌어서 가져온다. 이 물건은 데이터베이스와 아주 밀접하게 연결되어 있다.

- 예를 들어 게임에서 캐릭터를 만들 때, 캐릭터 정보(레벨, 이름 등)를 서버에 저장될 때, 저장된 정보가 Entity라고 볼 수 있다.

- **주요 역할**: 데이터베이스 테이블과 매핑하여 영속성 계층에서 데이터를 관리
- **주로 사용하는 곳**: 영속성 계층 (JPA에서 `@Entity`를 사용)
- **특징**:
    - 데이터베이스의 테이블과 매핑되며, 각 필드는 테이블의 컬럼에 해당합니다.
    - Entity는 데이터베이스의 상태를 반영하는 도메인 객체입니다.
    - JPA와 같은 ORM에서 사용하며, 데이터베이스의 행(row)을 객체로 표현합니다.

```java

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private int age;

    // getters and setters
}

```

### 

- **DTO**: 계층 간 데이터 전송을 위해 사용, 주로 서비스 계층과 프레젠테이션 계층 간에 사용.
- **DAO**: 데이터베이스에 접근하기 위한 객체, 데이터베이스 CRUD 작업을 담당.
- **VO**: 값 자체를 표현하며, 불변성을 가지는 객체, 값 비교가 중요한 곳에 사용.
- **Entity**: 데이터베이스 테이블과 매핑되는 객체, 주로 JPA에서 사용.

각각의 계층과 역할에 맞게 사용되어, 코드의 가독성과 유지보수성을 높이는 데 도움을 줍니다.
